#! /bin/sh

# deblob-check version 2008-03-28.0
# Inspired in gNewSense's find-firmware script.
# Written by Alexandre Oliva <lxoliva@fsfla.org>

# Copyright (C) 2008 Alexandre Oliva
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301
# USA


# usage: deblob-check [-VV] [-s S] [-lDdBbCcXxPpFft] [*.tar* patch-* *.patch]

# Look for too-long undocumented sequences of numbers (generally blobs
# in disguise) in source files.

# -V --verbose: increase verbosity level, for internal debugging.  May
#		be given at most twice.

# -s --sensitivity: must be followed by a blank and a number.
#		Specifies the number of consecutive integral or
#		character constants that trigger the blob detector.

# The default sensitivity is 32 constants.

# The sensitivity, if present, must be the first option.  The action
# selection, if present, must be the first argument, except for the
# sensitivity and verbosity.

# The default can be overridden with one of:

# -l --list-blobs: list files that contain sequences that match the
#		blob detector test and that are not known to be false
#		positives.  This is the default option.

# -D --deblob --mark-blobs: print the processed input, replacing
#		sequences that match the blob detector test and that
#		are NOT known to be false positives with
#		/*(DEBLOBBED)*/.

# -d --cat: print the processed input, as it would have been fed to
#		the blob detector.

# -B --print-marked-blobs: like -d, but print only the matching
#		sequences.

# -b --print-blobs: like -B, but do not deblob the sequences.

# -C --print-marked-blobs-with-context: like -B, but try to maximize
#		the context around the blobs.  This maximization can
#		be quite CPU-intensive.

# -c --print-blobs-with-context: like -b, but try to maximize the
#		context around the blobs.  Also quite intensive.

# -X --print-all-matches: print all blobs, be they known false
#		positives or blobs.

# -x --list-all-matches: list files that contain sequences that appear
#		to be blobs, be they known false positives or not.

# -P --mark-false-positives: print the processed input, replacing
#		sequences that match the blob detector test, but that
#		are known to be false positives, with /*(DEBLOBBED)*/.

# -p --list-false-positives: list files that contain false positives.

# -F --print-marked-false-positives: like -P, but print only the
#		matching sequences.

# -f --print-false-positives: like -F, but do not deblob the sequences.

# -t --test: run (very minimal) self-test.

# -v --version: print a version number

# -h -? --help: print short or long help message

# The exit status in all cases is success if nothing was printed, and
# failure if anything (except for the tester's success message) was
# printed.

# Choose verbosity level for sed script debugging and performance
# analysis.
case $1 in
--verbose | -V)
  shift
  case $1 in
  --verbose | -V)
    shift
    v="i\\
:
p;
i\\
"
    ;;
  *)
    v="P;i\\
"
    ;;
  esac
  ;;
*) 
  v="# "
  ;;
esac

sens=31 # 32 - 1
case $1 in
--sensitivity | -s)
  sens=$2;
  shift 2 || exit 1

  if test "$sens" -gt 0 2>/dev/null; then
    :
  else
    echo invalid sensitivity: $sens >&2
    exit 1
  fi

  sens=`expr $sens - 1`
  ;;
esac

test_mode=false

name=deblob-check

case $1 in
--version | -v)
  sed '/^# '$name' version /,/^# Written by/ { s/^# //; p; }; d' < $0
  exit 0
  ;;

-\?|-h)
  sed -n '/^# usage:/,/# -h/ { /^# -/,/^$/{s/^# \(-.*\):.*/\1/p; d; }; s/^\(# \?\)\?//p; }' < $0 &&
  echo
  echo "run \`$name --help | more' for full usage"
  exit 0
  ;;

--help)
  sed -n '/^# '$name' version /,/^[^#]/ s/^\(# \?\)\?//p' < $0
  exit 0
  ;;

--test | -t)
  test_mode=:
  ;;

--mark-false-positives | -P)
  shift;
  set_sed_cmd () {
    set_sedmain -f "p;" "p;" "b deblob;" "" "p; d;"
  }
  ;;

--print-marked-false-positives | -F)
  shift;
  set_sed_cmd () {
    set_sedmain -f "" "" "b deblob;" "i\\
::: $file :::
p; d;" "d;"
  }
  ;;

--print-false-positives | -f)
  shift;
  set_sed_cmd () {
    set_sedmain -f "" "" "i\\
::: $file :::
p;" "d;" "d;"
  }
  ;;

--deblob | --mark-blobs | -D)
  shift;
  set_sed_cmd () {
    set_sedmain -f "b deblob;" "p;" "p; d;"
  }
  ;;

--cat | -d)
  shift;
  set_sed_cmd () {
    set_sedmain -f "p; d;" "p;" "p; d;"
  }
  ;;

--print-marked-blobs | -B)
  shift;
  set_sed_cmd () {
    set_sedmain -f "b deblob;" "" "d;" "i\\
::: $file :::
  p; d;"
  }
  ;;

--print-blobs | -b)
  shift;
  set_sed_cmd () {
    set_sedmain -f "i\\
::: $file :::
  p;"
  }
  ;;

--print-marked-blobs-with-context | -C)
  shift;
  set_sed_cmd () {
    set_sedmain -c "b deblob;" "" "d;" "i\\
::: $file :::
  p; d;"
  }
  ;;

--print-blobs-with-context | -c)
  shift;
  set_sed_cmd () {
    set_sedmain -c "i\\
::: $file :::
  p;"
  }
  ;;

--list-false-positives | -p)
  shift;
  set_sed_cmd () {
    set_sedmain -f "" "" "i\\
$file
  q" "d;" "d;"
  }
  ;;

--list-all-matches | -x)
  shift;
  set_sed_cmd () {
    set_sedmain -f "i\\
$file
  q;" "" "i\\
$file
  q" "d;" "d;"
  }
  ;;

--print-all-matches | -X)
  shift;
  set_sed_cmd () {
    set_sedmain -f "b deblob" "" "b deblob;" "i\\
::: $file :::
p; d;" "d;"
  }
  ;;

*)
  case $1 in
  -- | -l | --list-blobs) shift;;
  esac
  set_sed_cmd () {
    set_sedmain -f "i\\
$file
  q;"
  }
  ;;

esac

case $1 in
--) shift;;
esac

if $test_mode; then
  pass=:

  # Exercise some nasty inputs to see that we recognize them as blobs
  # with full context.
  for string in \
    "1,2,3,4" \
    "= {
1, 0x2, 03, L'\x4'
}" \
    "=
{
  '\\x1', '\\002'
  ,
  {
    { \"\\x3\", },
    \"\\004\"
  },
};" \
    ".long 1,2
     .long \$3,\$4" \
    "#define X { 1, 2, \\
		 3, 4, /* comment */ \\
	       }" \
  "= {
/*
 * multi-line
 * comment
 */
 {
   0x4c00c000, 0x00000000, 0x00060000, 0x00000000,
 },
}" \
  ; do
    case `echo "$string" | $0 -s 4 -c` in
    "::: - :::
$string") ;;
    *) echo "failed positive test for:
$string" >&2
       pass=false;;
    esac
  done

  # Make sure we do not recognize these as blobs.
  for string in \
    "#define X { 1, 2 }
#define Y { 3, 4 }" \
    " 0x00, 0x00, 0x00 " \
  ; do
    case `echo "$string" | $0 -s 4` in
    "") ;;
    *) echo "failed negative test for:
$string" >&2
       pass=false;;
    esac
  done

  # How did we do?
  if $pass; then
    echo success
  fi

  $pass
  exit
fi

# Call addx as needed to set up more patterns to be recognized as
# false positives.

set_except () {
  if test -f $0.cache &&
     test `ls -t $0.cache $0 | sed 1q` = $0.cache; then
    . $0.cache
    return
  fi

  # Look for a multi-line definition starting with a line that matches
  # $1 (implicitly anchored to the beginning of the line), and ending
  # at the first ';'.
  defnc () {
    addx \
	"$1" \
	"$bol$1[^;]*\$" \
	"$1[^;]*;" \
	"b notblob;"
  }

  # Accept as a non-blob an expression $1 that would have otherwise
  # triggered blob detection.  The expression must end in a way that
  # would trigger the blob detection machinery.
  accept () {
    addx "" "" "$1" "b notblob;"
  }

  # After an initial line $1, accept also $2.  $2 must be enough to
  # get the normal blob detection going.
  startmatch () {
    addx \
	"$1" \
	"$bol$1$" \
	"$1[\\n]$2" \
	"b noblob;"
  }

  ocomment () {
    addx \
	"$1" \
	"^$1\\([^*]\\|[*][*]*[^*/]\\|[*]*[\\n]\\)*[*]*$" \
	"$1\\([^*]\\|[*][*]*[^*/]\\|[*]*[\\n]\\)*[*]*[*][/]" \
	"b noblob;"
  }

  oprepline () {
    addx \
	"$1" \
	"\\\\$" \
	"$1\\([^\\n]*\\\\[\\n]\\)*[^\\n\\\\]*$eol" \
	"b noblob;"
  }

  # case /$1 in
  # */linux*.tar* | */kernel*.tar* | */linux-*.*.*/*)
    # false alarms, contain source
    # drivers/net/wan/wanxlfw.inc_shipped -> wanxlfw.S
    accept 'static u8 firmware\[\]={.*0x23,0xFC,0x00,0x00,0x00,0x01,0xFF,0xF9,0x00,0xD4,0x61,0x00,0x06,0x74,0x33,0xFC,[\n]'"$blobpat*"
    # drivers/usb/serial/xircom_pgs_fw.h -> xircom_pgs.S
    defnc 'static const struct ezusb_hex_record xircom_pgs_firmware\[\] ='
    # drivers/usb/serial/keyspan_pda_fw_h -> keyspan_pda.S
    defnc 'static const struct ezusb_hex_record keyspan_pda_firmware\[\] ='
    # arch/m68k/ifpsp060/*.sa -> src/*.s
    accept '	\.long	0x60ff0000,0x02360000,0x60ff0000,0x16260000[\n]'"$blobpat*"
    accept '	\.long	0x60ff0000,0x17400000,0x60ff0000,0x15f40000[\n]'"$blobpat*"
    # arch/powerpc/platforms/cell/spufs/spu_save_dump.h_shipped -> spu_save.c
    defnc 'static unsigned int spu_save_code\[\]  __attribute__((__aligned__(128))) ='
    # arch/powerpc/platforms/cell/spufs/spu_restore_dump.h_shipped -> spu_restore.c
    defnc 'static unsigned int spu_restore_code\[\]  __attribute__((__aligned__(128))) ='
    # drivers/net/ixp2000/ixp2400_tx.ucode -> ixp2400_tx.uc
    defnc '	\.initial_reg_values	= (struct ixp2000_reg_value \[\]) {'
    # drivers/net/ixp2000/ixp2400_rx.ucode -> ixp2400_rx.uc
    defnc '	\.initial_reg_values	= (struct ixp2000_reg_value \[\]) {'
    # crypto/tcrypt.h
    defnc '[ 	]*\.\(digest\|entries\|input\|key\|output\|plaintext\|result\)[ 	]*= {'

    # checked:

    accept '	\$3 = {{pge = .*<repeats 11 times>}.*'
    startmatch '__clz_tab:' '	\.byte	0\(,[0-5]\)\+'"$eol"
    startmatch 'PITBL:' '  \.long  0xC0040000,0xC90FDAA2'
    # arch/m68k/mac/mac_penguin.S
    accept '\(0x[0F][0F],\)\+\\[\n]\(\(0x[0F][0F],\)\+\\[\n]\)*\(0x[0F][0F],\)\+0x00'
    # arch/s390/kernel/head.S
    startmatch '\.lowcase:' '	\.byte 0x00\(,0x0[1-7]\)\+[\n]'
    # arch/s390/kernel/bitmap.S
    startmatch '_zb_findmap:' '         \.byte  0\(,[123],0\)\+,4'"$eol"
    startmatch '_sb_findmap:' '         \.byte  8\(,0,[123]\)\+,0'"$eol"
    # arch/powerpc/lib/copyuser_64.S
    startmatch '	\.section __ex_table,"a"' "$blobpat*"
    # arch/powerpc/platforms/iseries/mf.c
    accept '	memcpy(src, "\\x01\\x00\\x00\\x01\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00".*PROGxxxx'
    # arch/ppc/platforms/ev64260.c
    defnc 'static const unsigned int cpu_745x\[2\]\[16\] ='
    # arch/alpha/lib/fls.c
    defnc 'const unsigned char __flsm1_tab\[256\] ='
    # drivers/input/misc/map_to_7segment.h
    startmatch '#define _MAP_0_32_ASCII_SEG7_NON_PRINTABLE	\\' '	\(0,\)\+\([\n]\|$\)'
    accept '	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[\n][\n]#define _MAP_33_47_ASCII_SEG7_SYMBOL'
    # sound/oss/ad1848.c
    defnc '	static int      init_values_b\[\] ='
    # drivers/input/keyboard/atkbd.c
    defnc 'static unsigned char atkbd_set2_keycode\[512\] ='
    # drivers/usb/serial/keyspan_pda.S and
    # drivers/usb/serial/xircom_pgs.S
    accept '	\.byte 0x41, .*[\n]string_\(mfg\|product\)_end:'
    # drivers/media/video/pwc/pwc-nala.h
    accept '      {0, 0, {0x04, 0x01, 0x03}},'
    # drivers/video/logo/*.ppm
    : ??? defnc 'P[13][\n]\(#.*[\n][\n]*\)*\([ ]*[0-9]*[\n]\)*'
    # Documentation/specialix.txt
    accept 'for i in [ 	0-9\\\n]*[\n]do'
    # Documentation/cpu-freq/cpufreq-stats.txt
    accept '         :   3600000   3400000   3200000   3000000   2800000 '
    # Documentation/scsi/sym53c8xx_2.txt and
    # Documentation/scsi/ncr53c8xx_2.txt
    accept '00 00[\n]64 01[\n]8e 0b[\n][\n][0-9a-f \n]*fe fe'
    accept '0f 00 08 08 64 00 0a 00 - id 0[\n]'"$blobpat*"
    accept 'default nvram data:'"$blobpat"
    # Documentation/video4linux/sn9c102.txt
    accept '0x0458     0x7025[\n]'"$blobpat*"
    # Documentation/video4linux/et61x251.txt
    accept '0x102c     0x6151[\n]'"$blobpat*"
    # Documentation/video4linux/zc0301.txt
    accept '0x041e     0x4017[\n]'"$blobpat*"
    # Documentation/uml/UserModeLinux-HOWTO.txt
    accept '  (gdb) x\/100x \$25[\n]  0x507d2434:     0x507d2434      0x00000000      0x08048000      0x080a4f8c'"$blobpat*"
    # Documentation/isdn/README.inc
    accept '      1  0  0  0  0x308[\n]'"$blobpat*"
    # Documentation/sched-stats.txt
    accept 'domain<N> <cpumask> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'"$eol"
    # net/ipv4/ipvs/ip_vs_sync.c and
    # net/sctp/sm_make_chunk.c and
    # include/linux/sctp.h
    accept '[ *	]*0                   1                   2                   3[\n][ *	]*0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1'
    # arch/x86/lguest/boot.c
    accept ' \*  1 1 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0'
    # drivers/net/fealnx.c
    ocomment '	[/][*] Configure the PCI bus bursts and FIFO thresholds.'
    # drivers/hwmon/via686a.c
    ocomment '\/\* the original LUT values from Alex van Kaam <darkside@chello\.nl>'

    # quite suspicious
    # arch/parisc/kernel/perf_images.h
    defnc 'static uint32_t onyx_images\[\]\[PCXU_IMAGE_SIZE\/sizeof(uint32_t)\] __read_mostly ='
    defnc 'static uint32_t cuda_images\[\]\[PCXW_IMAGE_SIZE\/sizeof(uint32_t)\] __read_mostly ='

    # too lax?
    defnc 'static yyconst flex_int\(16\|32\)_t yy_[^[]*\[[][0-9]*\] ='
    defnc 'static const yytype_u\?int\(8\|16\) yy[^[]*\[\] ='
    defnc '\(\|	\)static \(const \|\)\(unsigned \(short\|char\)\|struct SiS_[^ ]*\) SiS[^[]*\(\[[] [*0-9]*\]\)\+ *='

    defnc 'static const a3d_Hrtf_t A3dHrirZeros = {'
    defnc 'static const a3d_Hrtf_t A3dHrirImpulse = {'
    defnc 'static const a3d_Hrtf_t A3dHrirOnes = {'
    defnc 'static const a3d_Hrtf_t A3dHrirSatTest = {'
    defnc 'static const a3d_Hrtf_t A3dHrirDImpulse = {'
    defnc 'static const a3d_ItdDline_t A3dItdDlineZeros = {'
    defnc 'static auxxEqCoeffSet_t asEqCoefsNormal = {'
    defnc 'static xtalk_dline_t const alXtalkDlineTest = {'
    defnc 'static struct nand_ecclayout rtc_from4_nand_oobinfo = {'
    defnc 'static const s16 tempLUT\[\] ='
    defnc 'static const u8 viaLUT\[\] ='
    defnc 'static struct { int xres, yres, left, right, upper, lower, hslen, vslen, vfreq; } timmings\[\] __initdata = {'
    defnc 'static struct platinum_regvals platinum_reg_init_[0-9]* = {'
    defnc '} sisfb_ddc[sf]modes\[\] __devinitdata ='
    defnc 'static struct dvb_pll_desc .* = {'
    defnc 'static u32 LABELPATCHES\[\] __attribute((unused)) ='

    defnc 'static dbdev_tab_t dbdev_tab\[\] ='
    startmatch '\(EXP\|LOG\|ATAN\)TBL:' "$blobpat*"
    defnc 'static char fm_volume_table\[128\] ='
    defnc 'unsigned int snd_gf1_scale_table\[SNDRV_GF1_SCALE_TABLE_SIZE\] ='
    # remaining after original deblob_2_6_24, not fully checked

    defnc '#define OV51[18]_\(Y\|UV\)QUANTABLE {'
    defnc '		static unsigned char const data_bit\[64\] ='
    defnc '		static const u8 data_sbit\[32\] ='
    defnc '	\.RightCoefs ='
    defnc '	#define WakeupSeq    {'
    defnc '	SetRate44100\[\] ='
    defnc '	const short period\[32\] ='
    defnc '	const static int desc_idx_table\[\] ='
    defnc '	int prop_bcomm_irq\[3\*16\] ='
    defnc '	static char logSlopeTable\[128\] ='
    defnc '	static const int uc_\(dup\|word\)_table\[\]\[2\] ='
    defnc '	static const struct mc7_timing_params mc7_timings\[\] ='
    defnc '	static const u8 biphase_tbl\[\] ='
    defnc '	static const u8 cs170\[7 \* 8\] ='
    defnc '	static const u8 cs3[13]a\[8 \* 4\] ='
    defnc '	static const u8 dramsr13\[12 \* 5\] ='
    defnc '	static const u8 log10\[\] ='
    defnc '	static const u8 mpeg_hdr_data\[\] ='
    defnc '	static const u8 sdramtype\[13\]\[5\] ='
    defnc '	static const u8 t\[\] ='
    defnc '	static const unsigned int avg_pkts\[NCCTRL_WIN\] ='
    defnc '	static const unsigned short ac97_defaults\[\] ='
    defnc '	static int exp_lut\[256\] ='
    defnc '	static u16 jpeg_tables\[\]\[70\] ='
    defnc '	static u16 tables\[\] ='
    defnc '	static u32 logMagTable\[128\] ='
    defnc '	static u8 init_bufs\[13\]\[5\] ='
    defnc '	static u8 sine \[\] ='
    defnc '	static u_short geometry_table\[\]\[[45]\] ='
    defnc '	static unsigned char CRCTable1\[\] ='
    defnc '	static unsigned char CRCTable2\[\] ='
    defnc '	static unsigned char default_colors\[\] ='
    defnc '	static unsigned char iso_regs\[8\]\[4\] ='
    defnc '	static unsigned char log_scale\[101\] ='
    defnc '	static unsigned char msg\[\] ='
    defnc '	static unsigned char static_pad\[\] ='
    defnc '	static unsigned char table_alaw2ulaw\[\] ='
    defnc '	static unsigned char table_ulaw2alaw\[\] ='
    defnc '	u32 reg_boundaries\[\] ='
    defnc '	u8 b\[\] ='
    defnc '	uint8_t tx\[\] ='
    defnc '	unsigned char saa7111_regs\[\] ='
    defnc '	unsigned char sas_pcd_m_pg\[\] ='
    defnc '	} modedb\[5\] ='
    defnc '	} reg_tbl\[\] ='
    defnc '	} vals\[\] ='
    defnc '	} vm_devices\[\] ='
    defnc '    static const code distfix\[32\] ='
    defnc '    static const code lenfix\[512\] ='
    defnc '  int poly\[\]='
    defnc '  static const unsigned char asso_values\[\] ='
    defnc '  static unsigned char asso_values\[\] ='
    defnc '  } cards_ds\[\] ='
    defnc '    static const int8 countLeadingZerosHigh\[\] ='
    defnc '    static const unsigned short d\(base\|ext\)\[32\] ='
    defnc '#define OV511_QUANTABLESIZE	64'
    startmatch 'desc_config1:' "$blobpat*"
    defnc 'BYTE BtCard::SRAMTable_\(NTSC\|PAL\)\[\] ='
    defnc 'BYTE SRAMTable\[\]\[ 60 \] ='
    startmatch 'irq_prio_[hdlc]*:' "$blobpat*"
    defnc '__u8 _ascebc\[256\] ='
    defnc '__u8 _ebc_tolower\[256\] ='
    defnc '__u8 _ebc_toupper\[256\] ='
    defnc 'adapter_tag_info_t aic7[9x]xx_tag_info\[\] ='
    defnc 'char dmasound_alaw2dma8\[\] ='
    defnc 'char dmasound_ulaw2dma8\[\] ='
    defnc 'const struct aper_size_info_16 agp3_generic_sizes\[AGP_GENERIC_SIZES_ENTRIES\] ='
    defnc 'const u16 crc_itu_t_table\[256\] ='
    defnc 'const u8 byte_rev_table\[256\] ='
    defnc 'const u8 crc7_syndrome_table\[256\] ='
    defnc 'const unsigned char INIT_2\[127\] ='
    defnc 'int snd_sf_vol_table\[128\] ='
    defnc 'static	u_char	irq_to_siubit\[\] ='
    defnc 'static	u_char	irq_to_siureg\[\] ='
    defnc 'static Byte_t RData\[RDATASIZE\] ='
    defnc 'static __const__ __u16 gx_coeff\[256\] ='
    defnc 'static __u8 init7121ntsc\[\] ='
    defnc 'static __u8 init7121pal\[\] ='
    defnc 'static __u8 mode8420\(pro\|con\)\[\] ='
    defnc 'static byte capidtmf_leading_zeroes_table\[0x100\] ='
    defnc 'static char channel_map_madi_ss\[HDSPM_MAX_CHANNELS\] ='
    defnc 'static char coefficients\[NM_TOTAL_COEFF_COUNT \* 4\] ='
    defnc 'static char ecc_syndrome_table\[\] ='
    defnc 'static char isdn_audio_alaw_to_ulaw\[\] ='
    defnc 'static char isdn_audio_ulaw_to_alaw\[\] ='
    defnc 'static char mix_cvt\[101\] ='
    defnc 'static char opl3_volume_table\[128\] ='
    defnc 'static const RegInitializer initData\[\] __initdata ='
    defnc 'static const __u16 crc10_table\[256\] ='
    defnc 'static const __u32 crc_c\[256\] ='
    defnc 'static const char zr360[56]0_dht\[0x1a4\] ='
    defnc 'static const char zr360[56]0_dqt\[0x86\] ='
    defnc 'static const fixp_t cos_table\[46\] ='
    defnc 'static const int init_seq\[\] ='
    defnc 'static const int mobile_vid_table\[32\] ='
    defnc 'static const s16 snd_opl4_pitch_map\[0x600\] ='
    defnc 'static const s8 b43_tssi2dbm_b_table\[\] ='
    defnc 'static const s8 b43_tssi2dbm_g_table\[\] ='
    defnc 'static const s8 b43legacy_tssi2dbm_b_table\[\] ='
    defnc 'static const s8 b43legacy_tssi2dbm_g_table\[\] ='
    defnc 'static const s8 bcm43xx_tssi2dbm_b_table\[\] ='
    defnc 'static const s8 bcm43xx_tssi2dbm_g_table\[\] ='
    defnc 'static const s8 budtab\[256\] ='
    defnc 'static const struct aper_size_info_32 u3_sizes\[8\] ='
    defnc 'static const struct aper_size_info_8 via_generic_sizes\[9\] ='
    defnc 'static const struct color clut_vga16\[16\] ='
    defnc 'static const struct gain_entry gain_table\[2\]\[108\] ='
    defnc 'static const struct mV_pos __initdata mobilevrm_mV\[32\] ='
    defnc 'static const struct mV_pos __initdata vrm85_mV\[32\] ='
    defnc 'static const struct menelaus_vtg_value vcore_values\[\] ='
    defnc 'static const struct opl4_region regions_[0-9a-frums]*\[\] ='
    defnc 'static const struct regval regval_table\[\] ='
    defnc 'static const struct rf_channel rf_vals_5222\[\] ='
    defnc 'static const struct rf_channel rf_vals_5225_2527\[\] ='
    defnc 'static const struct rf_channel rf_vals_5226\[\] ='
    defnc 'static const struct rf_channel rf_vals_bg\[\] ='
    defnc 'static const struct rf_channel rf_vals_bg_2522\[\] ='
    defnc 'static const struct rf_channel rf_vals_bg_2523\[\] ='
    defnc 'static const struct rf_channel rf_vals_bg_2524\[\] ='
    defnc 'static const struct rf_channel rf_vals_bg_2525\[\] ='
    defnc 'static const struct rf_channel rf_vals_bg_2525e\[\] ='
    defnc 'static const struct rf_channel rf_vals_bg_2528\[\] ='
    defnc 'static const struct rf_channel rf_vals_noseq\[\] ='
    defnc 'static const struct rf_channel rf_vals_seq\[\] ='
    defnc 'static const u16 Sbox\[256\] ='
    defnc 'static const u16 count_lut\[\] ='
    defnc 'static const u16 e1000_igp_2_cable_length_table\[\] ='
    defnc 'static const u16 rtl8225bcd_rxgain\[\] ='
    defnc 'static const u16 rtl8225z2_rxgain\[\] ='
    defnc 'static const u16 stufftab\[5 \* 256\] ='
    defnc 'static const u16 tkip_sbox\[256\] ='
    defnc 'static const u16 wm8753_reg\[\] ='
    defnc 'static const u32 SS[0-3]\[256\] ='
    defnc 'static const u32 S[1-8]\[64\] ='
    defnc 'static const u32 T[0-5]\[256\] ='
    defnc 'static const u32 Tm\[24\]\[8\] ='
    defnc 'static const u32 bass_table\[41\]\[5\] ='
    defnc 'static const u32 bf_sbox\[256 \* 4\] ='
    defnc 'static const u32 camellia_sp0222\[256\] ='
    defnc 'static const u32 camellia_sp1110\[256\] ='
    defnc 'static const u32 camellia_sp3033\[256\] ='
    defnc 'static const u32 camellia_sp4404\[256\] ='
    defnc 'static const u32 crc32c_table\[256\] ='
    defnc 'static const u32 db_table\[101\] ='
    defnc 'static const u32 m8xx_size_to_gray\[M8XX_SIZES_NO\] ='
    defnc 'static const u32 mds\[4\]\[256\] ='
    defnc 'static const u32 pc2\[1024\] ='
    defnc 'static const u32 s[1-7]\[256\] ='
    defnc 'static const u32 sb8\[256\] ='
    defnc 'static const u32 tfrc_calc_x_lookup\[TFRC_CALC_X_ARRSIZE\]\[2\] ='
    defnc 'static const u32 treble_table\[41\]\[5\] ='
    defnc 'static const u64 [CT][0-7]\[256\] ='
    defnc 'static const u64 sbox[1-4]\[256\] ='
    defnc 'static const u64 sha512_K\[80\] ='
    defnc 'static const u8 Tr\[4\]\[8\] ='
    defnc 'static const u8 aes_sbox\[256\] ='
    defnc 'static const u8 calc_sb_tbl\[512\] ='
    defnc 'static const u8 exp_to_poly\[492\] ='
    defnc 'static const u8 legal_ansi_char_array\[0x40\] ='
    defnc 'static const u8 parity\[\] ='
    defnc 'static const u8 pc1\[256\] ='
    defnc 'static const u8 poly_to_exp\[255\] ='
    defnc 'static const u8 q[01]\[256\] ='
    defnc 'static const u8 ratio_lut\[\] ='
    defnc 'static const u8 rs\[256\] ='
    defnc 'static const u8 rtl8225_agc\[\] ='
    defnc 'static const u8 rtl8225_tx_power_cck\[\] ='
    defnc 'static const u8 rtl8225_tx_power_cck_ch14\[\] ='
    defnc 'static const u8 rtl8225z2_tx_gain_cck_ofdm\[\] ='
    defnc 'static const u8 setup\[\] ='
    defnc 'static const u8 speedtab \[3\]\[12\] ='
    defnc 'static const u_char irq_to_siubit\[\] ='
    defnc 'static const u_char irq_to_siureg\[\] ='
    defnc 'static const u_char nand_ecc_precalc_table\[\] ='
    defnc 'static const uint8_t parity\[256\] ='
    defnc 'static const unsigned char \(UV\|Y\)_QUANTABLE\[64\] ='
    defnc 'static const unsigned char __initdata mV_mobilevrm\[32\] ='
    defnc 'static const unsigned char __initdata mV_vrm85\[32\] ='
    defnc 'static const unsigned char barco_p1\[2\]\[9\]\[7\]\[3\] ='
    defnc 'static const unsigned char bitcounts\[256\] ='
    defnc 'static const unsigned char blue\[256\] ='
    defnc 'static const unsigned char chktab[hl]\[256\] ='
    defnc 'static const unsigned char comet_miireg2offset\[32\] ='
    defnc 'static const unsigned char euc2sjisibm_g3upper_map\[\]\[2\] ='
    defnc 'static const unsigned char init\[\] ='
    defnc 'static const unsigned char green\[256\] ='
    defnc 'static const unsigned char hash_table_ops\[64\*4\] ='
    defnc 'static const unsigned char hid_keyboard\[256\] ='
    defnc 'static const unsigned char mts_direction\[256\/8\] ='
    defnc 'static const unsigned char red\[256\] ='
    defnc 'static const unsigned char sjisibm2euc_map\[\]\[2\] ='
    defnc 'static const unsigned char vol_cvt_datt\[128\] ='
    defnc 'static const unsigned char wm_vol\[256\] ='
    defnc 'static const unsigned int MulIdx\[16\]\[16\] ='
    defnc 'static const unsigned int crctab32\[\] ='
    defnc 'static const unsigned short crc_flex_table\[\] ='
    defnc 'static const unsigned short logtable\[256\] ='
    defnc 'static const unsigned short wd7000_iobase\[\] ='
    defnc 'static const unsigned short x86_keycodes\[256\] ='
    defnc 'static const unsigned table\[\] ='
    defnc 'static int MV300_reg_8bit\[256\] ='
    defnc 'static int fifo_map\[\]\[MAX_TX_FIFOS\] ='
    defnc 'static int initial_lfsr\[\] ='
    defnc 'static int log_tbl\[129\] ='
    defnc 'static int logitech_expanded_keymap\[LOGITECH_EXPANDED_KEYMAP_SIZE\] ='
    defnc 'static int miro_fmtuner\[\]  ='
    defnc 'static int miro_tunermap\[\] ='
    defnc 'static int register_size\[\] ='
    defnc 'static int reserve_list\[MAX_RES_ARGS\] ='
    defnc 'static int reverse6\[64\] ='
    defnc 'static short attack_time_tbl\[128\] ='
    defnc 'static short beep_wform\[256\] ='
    defnc 'static short decay_time_tbl\[128\] ='
    defnc 'static short isdn_audio_[ua]law_to_s16\[\] ='
    defnc 'static struct cipher_testvec anubis_cbc_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec anubis_cbc_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec anubis_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec anubis_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec camellia_cbc_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec camellia_cbc_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec camellia_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec camellia_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec cast6_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec cast6_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec serpent_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec serpent_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec tea_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec tea_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec tf_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec tf_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec tnepres_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec xeta_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec xeta_enc_tv_template\[\] ='
    defnc 'static struct cipher_testvec xtea_dec_tv_template\[\] ='
    defnc 'static struct cipher_testvec xtea_enc_tv_template\[\] ='
    defnc 'static struct comp_testvec deflate_decomp_tv_template\[\] ='
    defnc 'static struct hash_testvec aes_xcbc128_tv_template\[\] ='
    defnc 'static struct hash_testvec crc32c_tv_template\[\] ='
    defnc 'static struct hash_testvec hmac_sha256_tv_template\[\] ='
    defnc 'static struct hash_testvec sha256_tv_template\[\] ='
    defnc 'static struct hash_testvec sha384_tv_template\[\] ='
    defnc 'static struct hash_testvec sha512_tv_template\[\] ='
    defnc 'static struct hash_testvec wp256_tv_template\[\] ='
    defnc 'static struct hash_testvec wp384_tv_template\[\] ='
    defnc 'static struct hash_testvec wp512_tv_template\[\] ='
    defnc 'static struct iwl_tx_power power_gain_table\[2\]\[IWL_MAX_GAIN_ENTRIES\] ='
    defnc 'static struct ovcamchip_regvals regvals_init_\(76be\|7[16]20\|7x10\)\[\] ='
    defnc 'static struct regval_list ov7670_default_regs\[\] ='
    defnc 'static struct s_c2 SetRate48000\[\] ='
    defnc 'static struct tea6420_multiplex TEA6420_line\[MXB_AUDIOS+1\]\[2\] ='
    defnc 'static struct wm_info i810_wm_16_100\[\] ='
    defnc 'static struct wm_info i810_wm_16_133\[\] ='
    defnc 'static struct wm_info i810_wm_24_100\[\] ='
    defnc 'static struct wm_info i810_wm_24_133\[\] ='
    defnc 'static struct wm_info i810_wm_8_100\[\] ='
    defnc 'static struct wm_info i810_wm_8_133\[\] ='
    defnc 'static struct { struct fb_bitfield red, green, blue, transp; int bits_per_pixel; } colors\[\] ='
    defnc 'static u16 asEqCoefsPipes\[64\] ='
    defnc 'static u16 asEqCoefsZeros\[50\] ='
    defnc 'static u16 asEqOutStateZeros\[48\] ='
    defnc 'static u16 default_key_map \[256\] ='
    defnc 'static u16 eq_levels\[64\] ='
    defnc 'static u32  crc32tab\[\] __attribute__ ((aligned(8))) ='
    defnc 'static u32 ac3_frames\[3\]\[32\] ='
    defnc 'static u32 adwDecim8\[33\] ='
    defnc 'static u32 h_prescale\[64\] ='
    defnc 'static u32 v_gain\[64\] ='
    defnc 'static u8 cvs_time_value\[\]\[XFER_UDMA_6 - XFER_UDMA_0 + 1\] ='
    defnc 'static u8 SRAM_Table\[\]\[60\] ='
    defnc 'static u8 act_time_value\[\]\[8\] ='
    defnc 'static u8 alps_tdee4_stv0297_inittab\[\] ='
    defnc 'static u8 bnx2_5706_stats_len_arr\[BNX2_NUM_STATS\] ='
    defnc 'static u8 bnx2_5708_stats_len_arr\[BNX2_NUM_STATS\] ='
    defnc 'static u8 flit_desc_map\[\] ='
    defnc 'static u8 ini_time_value\[\]\[8\] ='
    defnc 'static u8 init_tab \[\] ='
    defnc 'static u8 mac_reader\[\] ='
    defnc 'static u8 mt2131_config1\[\] ='
    defnc 'static u8 mt2266_init2\[\] ='
    defnc 'static u8 opera1_inittab\[\] ='
    defnc 'static u8 rco_time_value\[\]\[8\] ='
    defnc 'static u8 saa7113_init_regs\[\] ='
    defnc 'static u8 samsung_tbmu24112_inittab\[\] ='
    defnc 'static u8 tas3004_treble_table\[\] ='
    defnc 'static u8 w1_crc8_table\[\] ='
    defnc 'static u_char const data_sizes_32\[32\] ='
    defnc 'static u_long ident_map\[32\] ='
    defnc 'static u_short ctrl_map\[NR_KEYS\] *='
    defnc 'static u_short shift_ctrl_map\[NR_KEYS\] ='
    defnc 'static u_short shift_map\[NR_KEYS\] *='
    defnc 'static uchar perm1\[56\] ='
    defnc 'static uchar perm2\[48\] ='
    defnc 'static uchar perm3\[64\] ='
    defnc 'static uchar perm4\[48\] ='
    defnc 'static uchar perm5\[32\] ='
    defnc 'static uchar perm6\[64\] ='
    defnc 'static uchar sbox\[8\]\[4\]\[16\] ='
    defnc 'static uint16_t crc_table\[256\] ='
    defnc 'static uint8_t lpfcAlpaArray\[\] ='
    defnc 'static uint8_t seqprog\[\] ='
    defnc 'static unsigned char V110_OffMatrix_9600\[\] ='
    defnc 'static unsigned char V110_OnMatrix_9600\[\] ='
    defnc 'static unsigned char a2232_65EC02code\[\] ='
    defnc 'static unsigned char alaw_main\[\] ='
    defnc 'static unsigned char atkbd_set3_keycode\[512\] ='
    defnc 'static unsigned char atkbd_unxlate_table\[128\] ='
    defnc 'static unsigned char banner_table\[\] ='
    defnc 'static unsigned char bootlogo_bits\[\] ='
    defnc 'static unsigned char bus2core_8260\[\] ='
    defnc 'static unsigned char bus2core_8280\[\] ='
    defnc 'static unsigned char caseorder\[256\] ='
    defnc 'static unsigned char crystal_key\[\] ='
    defnc 'static unsigned char dsp_ulaw\[\] ='
    defnc 'static unsigned char expressiontab\[128\] ='
    defnc 'static unsigned char header2\[\] ='
    defnc 'static unsigned char hidp_keycode\[256\] ='
    defnc 'static unsigned char ima_adpcm_capture\[\] ='
    defnc 'static unsigned char ima_adpcm_init\[\] ='
    defnc 'static unsigned char ima_adpcm_playback\[\] ='
    defnc 'static unsigned char irq_xlate\[32\] ='
    defnc 'static unsigned char mulaw_main\[\] ='
    defnc 'static unsigned char nkbd_keycode\[128\] ='
    defnc 'static unsigned char pan_volumes\[256\] ='
    defnc 'static unsigned char parm_block\[32\] ='
    defnc 'static unsigned char raw3270_ebcgraf\[64\] ='
    defnc 'static unsigned char rfcomm_crc_table\[256\] ='
    defnc 'static unsigned char rwa_unlock\[\] __initdata ='
    defnc 'static unsigned char seqprog\[\] ='
    defnc 'static unsigned char snd_opl4_volume_table\[128\] ='
    defnc 'static unsigned char splash_bits\[\] ='
    defnc 'static unsigned char sunkbd_keycode\[128\] ='
    defnc 'static unsigned char ufs_fragtable_8fpb\[\] ='
    defnc 'static unsigned char ufs_fragtable_other\[\] ='
    defnc 'static unsigned char ulaw_dsp\[\] ='
    defnc 'static unsigned char usb_kbd_keycode\[256\] ='
    defnc 'static unsigned char vga_font\[cmapsz\] \(BTDATA \|\)='
    defnc 'static unsigned char voltab[12]\[128\] ='
    defnc 'static unsigned char vpd89_data\[\] ='
    defnc 'static unsigned char xtkbd_keycode\[256\] ='
    defnc 'static unsigned int ac3_bitrates\[32\] ='
    defnc 'static unsigned int bass_volume_table\[\] ='
    defnc 'static unsigned int bitrates\[3\]\[16\] ='
    defnc 'static unsigned int isa_dma_port\[8\]\[7\] ='
    defnc 'static unsigned int master_volume_table\[\] ='
    defnc 'static unsigned int mixer_volume_table\[\] ='
    defnc 'static unsigned int pan_table\[63\] ='
    defnc 'static unsigned int snapper_bass_volume_table\[\] ='
    defnc 'static unsigned int snapper_treble_volume_table\[\] ='
    defnc 'static unsigned int treble_volume_table\[\] ='
    defnc 'static unsigned int valid_mem\[\] ='
    defnc 'static unsigned long arthur_to_linux_signals\[32\] ='
    defnc 'static unsigned long shmedia_opcode_table\[64\] ='
    defnc 'static unsigned nv\([34]\|10\)TableP\(FIFO\|GRAPH\|RAMIN\)\[\]\[2\] ='
    defnc 'static unsigned short fcstab\[256\] ='
    defnc 'static unsigned short init[1234]\[128\] \/\*__devinitdata\*\/ ='
    defnc 'static unsigned short log_table\[LOG_TABLE_SIZE\*2\] ='
    defnc 'static unsigned short rc_ioport\[\] ='
    defnc 'static unsigned short translations\[\]\[256\] ='
    defnc 'static unsigned short treble_parm\[12\]\[9\] ='
    defnc 'struct RGBColors TextCLUT\[256\] ='
    defnc 'struct VgaRegs GenVgaTextRegs\[NREGS+1\] ='
    defnc 'struct battery_thresh  spitz_battery_levels_noac\[\] ='
    defnc 'struct battery_thresh spitz_battery_levels_acin\[\] ='
    defnc 'struct fb_bitfield rgb_bitfields\[\]\[4\] ='
    defnc 'struct mode_registers std_modes\[\] ='
    defnc 'struct vmode_attr vmode_attrs\[VMODE_MAX\] ='
    defnc 'u16 const crc16_table\[256\] ='
    defnc 'u16 const crc_ccitt_table\[256\] ='
    defnc 'u16 hfsplus_compose_table\[\] ='
    defnc 'u16 hfsplus_decompose_table\[\] ='
    defnc 'u_char const data_sizes_16\[32\] ='
    defnc 'u_short alt_map\[NR_KEYS\] ='
    defnc 'u_short altgr_map\[NR_KEYS\] ='
    defnc 'u_short ctrl_alt_map\[NR_KEYS\] ='
    defnc 'u_short ctrl_map\[NR_KEYS\] *='
    defnc 'u_short plain_map\[NR_KEYS\] *='
    defnc 'u_short shift_ctrl_map\[NR_KEYS\] ='
    defnc 'u_short shift_map\[NR_KEYS\] *='
    defnc 'uint patch_2[0f]00\[\] ='
    defnc 'uint16_t e1000_igp_cable_length_table\[IGP01E1000_AGC_LENGTH_TABLE_SIZE\] ='
    defnc 'uint16_t e1000_igp_2_cable_length_table\[IGP02E1000_AGC_LENGTH_TABLE_SIZE\] ='
    defnc '} euc2sjisibm_jisx0212_map\[\] ='
    defnc '} freq\[\] ='
    defnc '} hps_h_coeff_tab \[\] ='
    defnc '} hps_v_coeff_tab \[\] ='
    defnc '} init_tab\[\] ='
    defnc '} maven_gamma\[\] ='
    defnc '} mem_table\[\] ='
    defnc '} mxb_saa7740_init\[\] ='
    defnc '} pll_table\[\] ='
    defnc '} qam256_snr_tab\[\] ='
    defnc '} qam64_snr_tab\[\] ='
    defnc '} sil_port\[\] ='
    defnc '} vsb_snr_tab\[\] ='
    defnc '} yss225_registers\[\] __devinitdata ='
  #  ;;
  #*/patch*2.6.25-rc*)
    defnc ';[/][*]@@ -[0-9]*,[0-9]* +[0-9]*,[0-9]* @@ static uchar sbox\[8\]\[4\]\[16\] = {[*][/];'
    defnc '	\$3 = {{pge = '
    defnc 'static yyconst flex_int\(16\|32\)_t yy_[^[]*\[[0-9]*\] ='
    defnc 'static const yytype_u\?int\(8\|16\) yy[^[]*\[\] ='
    defnc '	int bcomm_irq\[3\*16\] ='
    defnc '	static const int8 countLeadingZerosHigh\[\] ='
    defnc 'static unsigned long shmedia_opcode_table\[64\] ='
    defnc 'u_char const data_sizes_16\[32\] ='
    defnc 'static u_char const data_sizes_32\[32\] ='
    defnc '\($constx\($sepx\)*\|[.][a-z]*[ 	]*=[ 	]*{\)*[ 	]*\.\(digest\|entries\|input\|key\|output\|plaintext\|result\)[ 	]*= {'
    defnc 'static struct .*_testvec .*_tv_template\[\] ='
    defnc 'static struct nic_qp_map nic_qp_mapping_[01]\[\] ='
    defnc 'static u8 mt2266_init2\[\] ='
    defnc 'static struct regval ov_initvals\[\] ='
    defnc 'static struct regval stk1125_initvals\[\] ='
    defnc 'static u8 bnx2x_stats_len_arr\[BNX2X_NUM_STATS\] ='
    defnc 'static const struct arb_line read_arb_data\[NUM_RD_Q\]\[MAX_RD_ORD + 1\] ='
    defnc 'static const struct arb_line write_arb_data\[NUM_WR_Q\]\[MAX_WR_ORD + 1\] ='
    defnc 'uint16_t e1000_igp_cable_length_table\[IGP01E1000_AGC_LENGTH_TABLE_SIZE\] ='
    defnc 'uint16_t e1000_igp_2_cable_length_table\[IGP02E1000_AGC_LENGTH_TABLE_SIZE\] ='
    oprepline '#define AR5K_RATES_11A '
    oprepline '#define AR5K_RATES_11B '
    oprepline '#define AR5K_RATES_11G '
    oprepline '#define AR5K_RATES_TURBO '
    oprepline '#define AR5K_RATES_XR '
    defnc '		} blinkrates\[\] ='
    defnc 'static const struct ath5k_ini ar5212_ini\[\] ='
    defnc 'static const struct ath5k_ini_mode rf5413_ini_mode_end\[\] ='
    defnc 'static const struct ath5k_ini_rf rfregs_5111\[\] ='
    defnc 'static const struct ath5k_ini_rf rfregs_5112\[\] ='
    defnc 'static const struct ath5k_ini_rf rfregs_5112a\[\] ='
    defnc 'static const struct ath5k_ini_rf rfregs_5413\[\] ='
    defnc 'static const u16 rtl8225bcd_rxgain\[\] ='
    defnc 'static const u8 rtl8225_agc\[\] ='
    defnc 'static const u8 rtl8225_tx_power_cck\[\] ='
    defnc 'static const u8 rtl8225_tx_power_cck_ch14\[\] ='
    defnc 'static const u16 rtl8225z2_rxgain\[\] ='
    defnc ';[/][*]@@ -[0-9]*,[0-9]* +[0-9]*,[0-9]* @@ static uchar sbox\[8\]\[4\]\[16\] = {[*][/];'
    accept '     \( 49,\)*[\n]\([ 0-9,]*[\n]\)*     \( 49,\)*[\n][*][/][;]\([\n];[/][*];@@ -[0-9]*,[0-9]* +[0-9]*,[0-9]* @@ kconf_id_hash (register const char \*str, register unsigned int len)[*][/];\)\?'"$eol"
    defnc 'static const unsigned char wm_vol\[256\] ='
    accept 'domain<N> <cpumask> 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36'"$eol"
    defnc 'static const u16 e1000_igp_2_cable_length_table\[\] ='
    accept '	24 => \[[\n]\(.*[\n]\)*	\]\(, [0-9]\+ => \[\)\?'"$eol"
    accept '		'"'"'0x.*[\n]\(.*[\n]\)*	\]\(, [0-9]\+ => \[\)\?'"$eol"
    defnc 'const u\(8\|16\|32\) b43_ntab_\(\(adjustpower\|estimatepowerlt\|gainctl\|iqlt\|loftlt\|noisevar1\|tdi[24]0a\)[01]\|channelest\|frame\(lookup\|struct\)\|mcs\|pilot\|tdtrn\|tmap\)\[\] ='
  #  ;;
  #*/nouveau-drm.patch)
    defnc '\(static uint32_t\|}\) nv04_graph_ctx_regs \[\] ='
    defnc 'static int nv10_graph_ctx_regs \[\] ='
    # this is highly suspicious, but it does not look like the
    # developers are trying to stop anyone from modifying it,
    # they just grabbed these numbers from mmio interactions.
    defnc 'static uint32_t nv\(4[013467ace]\|49_4b\|8[46]\)_ctx_voodoo\[\] ='
  #  ;;
  #*/linux-2.6-lirc.patch)
    defnc 'const unsigned char map_table\[\] ='
  #  ;;
  #*/linux-2.6-modsign-mpilib.patch)
    defnc 'const unsigned char __clz_tab\[\] ='
  #  ;;
  #*/linux-2.6-wireless.patch)
    defnc 'const u\(8\|16\|32\) b43_ntab_\(\(adjustpower\|estimatepowerlt\|gainctl\|iqlt\|loftlt\|noisevar1\|tdi[24]0a\)[01]\|channelest\|frame\(lookup\|struct\)\|mcs\|pilot\|tdtrn\|tmap\)\[\] ='
    defnc 'static const u16 rtl8225bcd_rxgain\[\] ='
    defnc 'static const u8 rtl8225_agc\[\] ='
    defnc 'static const u8 rtl8225_tx_power_cck\[\] ='
    defnc 'static const u8 rtl8225_tx_power_cck_ch14\[\] ='
    defnc 'static const u16 rtl8225z2_rxgain\[\] ='
    defnc 'static const struct ath5k_ini_rf rfregs_5111\[\] ='
    defnc 'static const struct ath5k_ini_rf rfregs_5112\[\] ='
    defnc 'static const struct ath5k_ini_rf rfregs_5112a\[\] ='
    defnc 'static const struct ath5k_ini_rf rfregs_5413\[\] ='
    oprepline '#define AR5K_RATES_11A '
    oprepline '#define AR5K_RATES_11B '
    oprepline '#define AR5K_RATES_11G '
    oprepline '#define AR5K_RATES_TURBO '
    oprepline '#define AR5K_RATES_XR '
    defnc 'static const struct ath5k_ini ar5212_ini\[\] ='
    defnc 'static const struct ath5k_ini_mode rf5413_ini_mode_end\[\] ='
    defnc '		} blinkrates\[\] ='
  #  ;;
  #*/linux-2.6-wireless-pending.patch)
    oprepline '#define AR5K_RATES_11A '
    oprepline '#define AR5K_RATES_11B '
    oprepline '#define AR5K_RATES_11G '
    oprepline '#define AR5K_RATES_TURBO '
    oprepline '#define AR5K_RATES_XR '
    defnc 'static const struct ath5k_ini_mode rf2413_ini_mode_end\[\] ='
    accept '   sudo modprobe ath5k debug=0x00000400[\n]'"$blobpat*"
    startmatch '     rates:[\n]' "$blobpat*"
    accept '	{ 1, MODULATION_XR, 3000, 1, 150, 3 },		\\[\n]\(.*\\[\n]\)*}'
  #  ;;
  #*/linux-2.6-drm-i915-modeset.patch)
    defnc 'static const u32 filter_table\[\] ='
  #  ;;
  #esac

  # turn "/rx1/b notblob;\n/rx2/b notblob;..." into
  # "/rx1\|rx2\|.../b notblob;"
  case $match_check in
  */*/"b notblob;"*/*/"b notblob;"*)
    sedx=`{
	echo;
	echo "$match_check" | sed '/^[ 	]*\(#\|$\)/d'
      } |
      sed -n '
      : top
      $!{ N; b top; }
      ${
        : retry
        s,\([\n][ 	]*/[^\n]*\)/b notblob;[\n][ 	]*/\([^\n]*/b notblob;\),\1\\\\|\2,g
        t retry
        p;
	q;
      }'`
    ;;
  esac

  rm -f $0.cache
  {
    quote () {
      sed 's,[\\$`"],\\&,g;1s,=,=",;$s,$,",'
    }
    echo "match_first=$match_first" | quote
    echo "need_more=$need_more" | quote
    echo "match_full=$match_full" | quote
    echo "match_check=$match_check" | quote
  } > $0.cache
}  

# Regular expression that matches a literal constant.
constx="[0-9][0-9a-fA-FxX]*"
# Regular expression that matches a separator between consecutive
# literal constants.
sepx="\\([,:{} 	LlUu\"\'\\\\\\n]\\+[xX\$]\\?\\|[ 	\\n]*[.][a-zA-Z][a-zA-Z0-9]*[ 	]\\+[\$]\\?\\)"
# Regulat expression that matches an unterminated /*C*/ comment.
unfcomment="/[/][*]\\([^*]\\|[*][*]*[^*/]\\|[*]*[\\n]\\)*[*]*\$/"

blobpat="$constx\\($sepx$constx\\)"
blobseq="$blobpat\\{$sens\\}"
bol="\\(^\\|[\\n]\\)"
eol="\\([\\n]\\|\$\\)"

# Set up the sed script that will go through the (processed) input,
# looking for sequences of blobs and printing whatever was requested.

set_sedmain () {
  context=:
  
  case $1 in
  -f)
    shift
    context=false
    ;;
  -c)
    shift
    context=:
    ;;
  esac

  # Concatenate lines as long as the end of the current line ends with
  # a literal constant or characters that generally precede bracketed
  # assignments, followed or not by separators.  This ensures that, if
  # there is a blob somewhere, it will be in a single line.  It's also
  # the fastest mechanism, unlike the other collectors below, that, by
  # trying to preserve more context, end up selecting too large
  # expressions.  We only want them to recognize known false
  # positives, or to find new blobs while getting their surrounding
  # context.
  addx \
      "[^\\n]*$constx\\($sepx\\)\\?\$" \
      "$constx\\($sepx\\)\\?\$" \
      ".*$blobseq.*" \
      "b blob"

  if $context; then    
    # Concatenate as many lines as needed to get a complete /*C*/
    # comment in.
    addx \
	"[^\\n]*[/][*]\\([^*\\n]\\|[*][*]*[^*/\\n]\\)*[*]*$" \
	"[/][*]\\([^*]\\|[*][*]*[^*/]\\|[*]*[\\n]\\)*[*]*$"

    # Concatenate as many lines as needed to get to the end (;) of an
    # initialized declaration.  We don't try to be too clever WRT
    # semicolons in comments, strings, etc.
    addx \
	"[^\\n]*=" \
	"=\\([^;{\\n]\\|[/][*].*[*][/]\\|[/][/][^\\n]*\\)*\\([\\n][^;{]*{\\)\\([^;]\\|[/][*].*[*][/]\\|[/][/][^\\n]*\\)*$"

    addx \
	"\\\\$" \
	"\\\\$"
  fi

  match_first="^\\($match_first\\)"
  need_more="$need_more"
  match_full="\\($match_full\\)"

  sedmain="
: restart
$v:???match_first
/$match_first/ {
  : need_more
  $v:???need_more
  /$need_more/ {
    \$!N;
    \$!b need_more;
  }
  $v:???match_full
  /$bol$match_full/{
    $v:+++match_full
    h;
    s/$bol$match_full/\1/g;
    $v:???blobseq
    /$blobseq/{
      $v:+++blobseq
      g;
      b blob;
    }
    g;
    $match_check
    # If we got past the checks (including that for blobs), we know
    # we're ok.
    b noblobline;
  }
}
$v:???blobseq (short)
/$blobseq/b blob;
b noblobline;
: noblob
$v:noblob
$5
b notblob
: deblobbed
$v:deblobbed
$4
b noblobline
: notblob
$v:notblob
$3
d;
: noblobline
$v:noblobline
$2
d;
: blob
$v:blob
$1
d;
: deblob
$v:deblob
s/{[{ 	\n]*$constx\\($sepx$constx\\)\\{$sens,\\}}[ 	]*;/{\/*(DEBLOBBED)*\/};/g
t deblobbed_some
$v:none-deblobbed
s/$constx\\($sepx$constx\\)\\{$sens,\\}/\/*(DEBLOBBED)*\//g
t deblobbed
b noblobline
: deblobbed_some
$v:deblobbed_some
s/$constx\\($sepx$constx\\)\\{$sens,\\}/\/*(DEBLOBBED)*\//g
t deblobbed
b noblobline
"
}

setup () {
  unset match_first
  unset need_more
  unset match_full
  unset match_check

  # Add $1 to match_first, $2 to need_more, $3 to match_full, $4 to
  # check action.  All 3 regexps are anchored to the beginning of the
  # pattern.
  addx () {
    test -z "$1" || match_first="$match_first${match_first+\\|}$1"
    test -z "$2" || need_more="$need_more${need_more+\\|}$2"

    if test -n "$3"; then
      match_full="$match_full${match_full+\\|}$3"
      if test -n "$4"; then
        match_check="$match_check
/$bol$3/$4
"
      fi
    fi
  }

  set_except

  set_sed_cmd
}

# Process an input file named in $1 and run it through the blob
# recognizer.  Functions set_except and set_sed_cmd provide additional
# arguments on a per-file and per-action basis.

check () {
  # Choose the input source...
  case $1 in
  -) in= ;;
  *) in='< "$1"' ;;
  esac

  # Decompress as needed...
  case $1 in
  *.bz2) cmd1='bunzip2' ;;
  *.gz) cmd1='gunzip' ;;
  *) cmd1='cat' ;;
  esac

  # Extract or otherwise munge...
  case $1 in
  *.tar*)
    cmd2="tar -xf - --to-command='echo \";/*begin \$TAR_FILENAME*/;\"; cat; echo \";/**/;\"; echo \";/*end \$TAR_FILENAME*/;\"'";;
  *patch* | *diff*)
    sedpatch='
      /^[-]/d;
      /^\(@@\|+++\) / {
	i\
*/;
	s,^,;/*,;
	s,$,*/;,;
      };
      s,^[ +],,;'
    cmd2='sed "$sedpatch"' ;;
  *)
    cmd2='cat' ;;
  esac

  # Then run through the selected action.
  if test `echo "$sedmain" | wc -c` -lt 1024; then
    cmd3='sed -n "$sedmain"'
  else
    scriptname=`mktemp -t sed-deblob-tmp-XXXXXX`
    echo "$sedmain" > $scriptname
    cmd3="{ sed -n -f \"$scriptname\" && rm -f \"$scriptname\" || echo preserving \"$scriptname\" >&2; }"
  fi

  # Optimize useless "cat"s away.
  pipe="$cmd1 | $cmd2 | $cmd3"
  while :; do
    case "| $pipe |" in
    *"| cat |"*)
      pipe=`echo "| $pipe |" | sed 's,| cat |,|,g;s,^| ,,;s, |$,,;s,^|$,cat,'`
      ;;
    *)
      break ;;
    esac
  done

  # Do it.
  case $pipe in
  "{"*)
    eval "{ $pipe; } $in"
    ;;
  *)
    eval "$in $pipe"
    ;;
  esac
}

# If no input given, use stdin.
case $# in
0)
  test -t 0 && echo reading from standard input >&2
  set fnord -
  shift
  ;;
esac

# The lines below commented out out #list: can be used to get a list
# of matching inputs.  ATM this is useless, so we just use a shell
# boolean.

#list: n=$#
pass=:

setup

# Go through each of the input files in the command line.
for file
do
  # If we print anything whatsoever (even a blank line) while
  # processing it, we've failed.
  if check "$file" | grep '.*'; then
      pass=false
      #list: set fnord "$@" "$file"
      #list: shift
  fi
done

#list: shift $n

#list: exec test $# = 0
$pass
exit
